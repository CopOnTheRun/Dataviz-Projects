from pathlib import Path
from typing import Any
from datetime import datetime

import requests

import pandas as pd
from pandas import DataFrame

def grab_race_data() -> list[dict[str,str]]:
    url = "https://runsignup.com/Race/Results/53948"

    #generated by curl convert
    params = {'resultSetId': '450578', 
              'page': 1, 
              'num': '5000', #max number
              'search': ''}
    cookies = {'cookie_policy_accepted': 'T'}
    headers = {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:125.0) Gecko/20100101 Firefox/125.0',
               'Accept': 'application/json, */*; q=0.01', 
               'Accept-Language': 'en-US,en;q=0.5', 
               'X-Requested-With': 'XMLHttpRequest',
               'Connection': 'keep-alive',
               'Referer': 'https://runsignup.com/Race/Results/53948',
               'Sec-Fetch-Dest': 'empty',
               'Sec-Fetch-Mode': 'cors',
               'Sec-Fetch-Site': 'same-origin'}

    response_json = []
    for i in range(1,5): #there are ~20k results 
        params['page'] = i
        response = requests.get(url, params=params, cookies=cookies, headers=headers)
        response_json.append(response.json())
    return response_json

def to_dataframe(dirty_data: list[dict[str,Any]]) -> DataFrame:
    keys = (key['name'].replace('\n',' ') for key in dirty_data[0]['headings'])
    data = []
    for dirty_dict in dirty_data:
        data.extend(dirty_dict['resultSet']['results'])
    df = DataFrame(data=data, columns = keys)
    return df

def refactor_cols(data):
    data[["Gender","Age Group"]] = data["Division"].str.split(" ",n=1,expand=True)
    data[["First Name","Last Name"]] = data["Name"].str.split(" ",n=1,expand=True)

    drop_cols = ["Name", "Place", "Division", "Division Place", "Pace"]
    data = data.drop(drop_cols, axis="columns")
    data = data.reindex(columns = ["Bib","First Name","Last Name", "Clock Time", "Chip Time",
                        "5K SPLIT", "Gender", "Age Group", "Profile Image URL"])
    time_cols = ["Clock Time","Chip Time", "5K SPLIT",]
    add_hour(data, time_cols)
    data["Age Group"] = data["Age Group"].replace("9 and Under","0 - 9")
    data["Age Group"] = data["Age Group"].replace("85 and Over","85 +")
    remove_non_names(data)
    return data

def remove_non_names(df):
    name = df["First Name"] + " " + df["Last Name"]
    is_anon = name == "Anonymous Participant"
    is_unknow = name == "Unknown Runner"
    df.loc[is_anon | is_unknow, ["First Name", "Last Name"]] = None
    return df

def cast_race_data(df):
    time_cols = ["Clock Time","Chip Time", "5K SPLIT",]
    string_cols = ["Bib", "First Name", "Last Name", "Profile Image URL"]
    to_delta(df, time_cols)
    df[string_cols] = df[string_cols].astype("string")
    ages = df["Age Group"].dropna().unique()
    sort_key = lambda a: int(a.split()[0])
    sorted_age = sorted(ages,key=sort_key)
    age_group = pd.CategoricalDtype(sorted_age, ordered = True)
    df["Age Group"] = df["Age Group"].astype(age_group)
    df["Gender"] = df["Gender"].astype('category')

def add_hour(df, cols):
    for col in cols:
        no_hour = df[col].str.count(":") < 2
        df.loc[no_hour,col] = "0:" + df.loc[no_hour,col]

def to_delta(df, cols):
    for col in cols:
        df[col] = pd.to_timedelta(df[col])

def get_df():
    data_path = Path("./Data")
    dirty_path = data_path / Path("./dirty_data.csv")
    clean_path = data_path / Path("./clean_data.csv")
    if not dirty_path.exists():
        dirty = grab_race_data()
        data = to_dataframe(dirty)
        data.to_csv(dirty_path, index=False)
    if not clean_path.exists():
        data = pd.read_csv(dirty_path)
        data = refactor_cols(data)
        data.to_csv(clean_path,index=False)

    data = pd.read_csv(clean_path,)
    cast_race_data(data)
    return data

